//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

APIEXEC_GetSeed_args = function(args) {
  this.accessId = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
  }
};
APIEXEC_GetSeed_args.prototype = {};
APIEXEC_GetSeed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetSeed_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetSeed_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_GetSeed_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetSeedResult(args.success);
    }
  }
};
APIEXEC_GetSeed_result.prototype = {};
APIEXEC_GetSeed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetSeedResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetSeed_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetSeed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_SendTransaction_args = function(args) {
  this.accessId = null;
  this.transaction = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new Transaction(args.transaction);
    }
  }
};
APIEXEC_SendTransaction_args.prototype = {};
APIEXEC_SendTransaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new Transaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SendTransaction_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SendTransaction_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_SendTransaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SendTransactionResult(args.success);
    }
  }
};
APIEXEC_SendTransaction_result.prototype = {};
APIEXEC_SendTransaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SendTransactionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SendTransaction_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SendTransaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_SmartContractGet_args = function(args) {
  this.accessId = null;
  this.address = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_SmartContractGet_args.prototype = {};
APIEXEC_SmartContractGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SmartContractGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SmartContractGet_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_SmartContractGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SmartContractGetResult(args.success);
    }
  }
};
APIEXEC_SmartContractGet_result.prototype = {};
APIEXEC_SmartContractGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SmartContractGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SmartContractGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SmartContractGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_WalletIdGet_args = function(args) {
  this.accessId = null;
  this.address = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_WalletIdGet_args.prototype = {};
APIEXEC_WalletIdGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletIdGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletIdGet_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_WalletIdGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new WalletIdGetResult(args.success);
    }
  }
};
APIEXEC_WalletIdGet_result.prototype = {};
APIEXEC_WalletIdGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new WalletIdGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletIdGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletIdGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_args = function(args) {
  this.address = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_WalletBalanceGet_args.prototype = {};
APIEXEC_WalletBalanceGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletBalanceGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new WalletBalanceGetResult(args.success);
    }
  }
};
APIEXEC_WalletBalanceGet_result.prototype = {};
APIEXEC_WalletBalanceGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new WalletBalanceGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletBalanceGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_PoolGet_args = function(args) {
  this.sequence = null;
  if (args) {
    if (args.sequence !== undefined && args.sequence !== null) {
      this.sequence = args.sequence;
    }
  }
};
APIEXEC_PoolGet_args.prototype = {};
APIEXEC_PoolGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sequence = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_PoolGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_PoolGet_args');
  if (this.sequence !== null && this.sequence !== undefined) {
    output.writeFieldBegin('sequence', Thrift.Type.I64, 1);
    output.writeI64(this.sequence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXEC_PoolGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PoolGetResult(args.success);
    }
  }
};
APIEXEC_PoolGet_result.prototype = {};
APIEXEC_PoolGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PoolGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_PoolGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_PoolGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIEXECClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
APIEXECClient.prototype = {};

APIEXECClient.prototype.GetSeed = function(accessId, callback) {
  this.send_GetSeed(accessId, callback); 
  if (!callback) {
    return this.recv_GetSeed();
  }
};

APIEXECClient.prototype.send_GetSeed = function(accessId, callback) {
  var params = {
    accessId: accessId
  };
  var args = new APIEXEC_GetSeed_args(params);
  try {
    this.output.writeMessageBegin('GetSeed', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetSeed();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_GetSeed = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_GetSeed_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetSeed failed: unknown result';
};

APIEXECClient.prototype.SendTransaction = function(accessId, transaction, callback) {
  this.send_SendTransaction(accessId, transaction, callback); 
  if (!callback) {
    return this.recv_SendTransaction();
  }
};

APIEXECClient.prototype.send_SendTransaction = function(accessId, transaction, callback) {
  var params = {
    accessId: accessId,
    transaction: transaction
  };
  var args = new APIEXEC_SendTransaction_args(params);
  try {
    this.output.writeMessageBegin('SendTransaction', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SendTransaction();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_SendTransaction = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_SendTransaction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SendTransaction failed: unknown result';
};

APIEXECClient.prototype.SmartContractGet = function(accessId, address, callback) {
  this.send_SmartContractGet(accessId, address, callback); 
  if (!callback) {
    return this.recv_SmartContractGet();
  }
};

APIEXECClient.prototype.send_SmartContractGet = function(accessId, address, callback) {
  var params = {
    accessId: accessId,
    address: address
  };
  var args = new APIEXEC_SmartContractGet_args(params);
  try {
    this.output.writeMessageBegin('SmartContractGet', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SmartContractGet();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_SmartContractGet = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_SmartContractGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SmartContractGet failed: unknown result';
};

APIEXECClient.prototype.WalletIdGet = function(accessId, address, callback) {
  this.send_WalletIdGet(accessId, address, callback); 
  if (!callback) {
    return this.recv_WalletIdGet();
  }
};

APIEXECClient.prototype.send_WalletIdGet = function(accessId, address, callback) {
  var params = {
    accessId: accessId,
    address: address
  };
  var args = new APIEXEC_WalletIdGet_args(params);
  try {
    this.output.writeMessageBegin('WalletIdGet', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_WalletIdGet();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_WalletIdGet = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_WalletIdGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'WalletIdGet failed: unknown result';
};

APIEXECClient.prototype.WalletBalanceGet = function(address, callback) {
  this.send_WalletBalanceGet(address, callback); 
  if (!callback) {
    return this.recv_WalletBalanceGet();
  }
};

APIEXECClient.prototype.send_WalletBalanceGet = function(address, callback) {
  var params = {
    address: address
  };
  var args = new APIEXEC_WalletBalanceGet_args(params);
  try {
    this.output.writeMessageBegin('WalletBalanceGet', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_WalletBalanceGet();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_WalletBalanceGet = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_WalletBalanceGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'WalletBalanceGet failed: unknown result';
};

APIEXECClient.prototype.PoolGet = function(sequence, callback) {
  this.send_PoolGet(sequence, callback); 
  if (!callback) {
    return this.recv_PoolGet();
  }
};

APIEXECClient.prototype.send_PoolGet = function(sequence, callback) {
  var params = {
    sequence: sequence
  };
  var args = new APIEXEC_PoolGet_args(params);
  try {
    this.output.writeMessageBegin('PoolGet', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_PoolGet();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

APIEXECClient.prototype.recv_PoolGet = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new APIEXEC_PoolGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'PoolGet failed: unknown result';
};
