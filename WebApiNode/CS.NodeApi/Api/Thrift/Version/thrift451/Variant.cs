/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Variant : TBase
  {
    private string _v_null;
    private sbyte _v_void;
    private bool _v_boolean;
    private bool _v_boolean_box;
    private sbyte _v_byte;
    private sbyte _v_byte_box;
    private short _v_short;
    private short _v_short_box;
    private int _v_int;
    private int _v_int_box;
    private long _v_long;
    private long _v_long_box;
    private double _v_float;
    private double _v_float_box;
    private double _v_double;
    private double _v_double_box;
    private string _v_string;
    private @object _v_object;
    private List<Variant> _v_array;
    private List<Variant> _v_list;
    private THashSet<Variant> _v_set;
    private Dictionary<Variant, Variant> _v_map;
    private string _v_big_decimal;
    private Amount _v_amount;
    private byte[] _v_byte_array;

    public string V_null
    {
      get
      {
        return _v_null;
      }
      set
      {
        __isset.v_null = true;
        this._v_null = value;
      }
    }

    public sbyte V_void
    {
      get
      {
        return _v_void;
      }
      set
      {
        __isset.v_void = true;
        this._v_void = value;
      }
    }

    public bool V_boolean
    {
      get
      {
        return _v_boolean;
      }
      set
      {
        __isset.v_boolean = true;
        this._v_boolean = value;
      }
    }

    public bool V_boolean_box
    {
      get
      {
        return _v_boolean_box;
      }
      set
      {
        __isset.v_boolean_box = true;
        this._v_boolean_box = value;
      }
    }

    public sbyte V_byte
    {
      get
      {
        return _v_byte;
      }
      set
      {
        __isset.v_byte = true;
        this._v_byte = value;
      }
    }

    public sbyte V_byte_box
    {
      get
      {
        return _v_byte_box;
      }
      set
      {
        __isset.v_byte_box = true;
        this._v_byte_box = value;
      }
    }

    public short V_short
    {
      get
      {
        return _v_short;
      }
      set
      {
        __isset.v_short = true;
        this._v_short = value;
      }
    }

    public short V_short_box
    {
      get
      {
        return _v_short_box;
      }
      set
      {
        __isset.v_short_box = true;
        this._v_short_box = value;
      }
    }

    public int V_int
    {
      get
      {
        return _v_int;
      }
      set
      {
        __isset.v_int = true;
        this._v_int = value;
      }
    }

    public int V_int_box
    {
      get
      {
        return _v_int_box;
      }
      set
      {
        __isset.v_int_box = true;
        this._v_int_box = value;
      }
    }

    public long V_long
    {
      get
      {
        return _v_long;
      }
      set
      {
        __isset.v_long = true;
        this._v_long = value;
      }
    }

    public long V_long_box
    {
      get
      {
        return _v_long_box;
      }
      set
      {
        __isset.v_long_box = true;
        this._v_long_box = value;
      }
    }

    public double V_float
    {
      get
      {
        return _v_float;
      }
      set
      {
        __isset.v_float = true;
        this._v_float = value;
      }
    }

    public double V_float_box
    {
      get
      {
        return _v_float_box;
      }
      set
      {
        __isset.v_float_box = true;
        this._v_float_box = value;
      }
    }

    public double V_double
    {
      get
      {
        return _v_double;
      }
      set
      {
        __isset.v_double = true;
        this._v_double = value;
      }
    }

    public double V_double_box
    {
      get
      {
        return _v_double_box;
      }
      set
      {
        __isset.v_double_box = true;
        this._v_double_box = value;
      }
    }

    public string V_string
    {
      get
      {
        return _v_string;
      }
      set
      {
        __isset.v_string = true;
        this._v_string = value;
      }
    }

    public @object V_object
    {
      get
      {
        return _v_object;
      }
      set
      {
        __isset.v_object = true;
        this._v_object = value;
      }
    }

    public List<Variant> V_array
    {
      get
      {
        return _v_array;
      }
      set
      {
        __isset.v_array = true;
        this._v_array = value;
      }
    }

    public List<Variant> V_list
    {
      get
      {
        return _v_list;
      }
      set
      {
        __isset.v_list = true;
        this._v_list = value;
      }
    }

    public THashSet<Variant> V_set
    {
      get
      {
        return _v_set;
      }
      set
      {
        __isset.v_set = true;
        this._v_set = value;
      }
    }

    public Dictionary<Variant, Variant> V_map
    {
      get
      {
        return _v_map;
      }
      set
      {
        __isset.v_map = true;
        this._v_map = value;
      }
    }

    public string V_big_decimal
    {
      get
      {
        return _v_big_decimal;
      }
      set
      {
        __isset.v_big_decimal = true;
        this._v_big_decimal = value;
      }
    }

    public Amount V_amount
    {
      get
      {
        return _v_amount;
      }
      set
      {
        __isset.v_amount = true;
        this._v_amount = value;
      }
    }

    public byte[] V_byte_array
    {
      get
      {
        return _v_byte_array;
      }
      set
      {
        __isset.v_byte_array = true;
        this._v_byte_array = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool v_null;
      public bool v_void;
      public bool v_boolean;
      public bool v_boolean_box;
      public bool v_byte;
      public bool v_byte_box;
      public bool v_short;
      public bool v_short_box;
      public bool v_int;
      public bool v_int_box;
      public bool v_long;
      public bool v_long_box;
      public bool v_float;
      public bool v_float_box;
      public bool v_double;
      public bool v_double_box;
      public bool v_string;
      public bool v_object;
      public bool v_array;
      public bool v_list;
      public bool v_set;
      public bool v_map;
      public bool v_big_decimal;
      public bool v_amount;
      public bool v_byte_array;
    }

    public Variant() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                V_null = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                V_void = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                V_boolean = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                V_boolean_box = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Byte) {
                V_byte = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Byte) {
                V_byte_box = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I16) {
                V_short = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I16) {
                V_short_box = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                V_int = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                V_int_box = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                V_long = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                V_long_box = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Double) {
                V_float = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Double) {
                V_float_box = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Double) {
                V_double = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Double) {
                V_double_box = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.String) {
                V_string = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                V_object = new @object();
                V_object.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.List) {
                {
                  V_array = new List<Variant>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Variant _elem6;
                    _elem6 = new Variant();
                    _elem6.Read(iprot);
                    V_array.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.List) {
                {
                  V_list = new List<Variant>();
                  TList _list7 = iprot.ReadListBegin();
                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                  {
                    Variant _elem9;
                    _elem9 = new Variant();
                    _elem9.Read(iprot);
                    V_list.Add(_elem9);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Set) {
                {
                  V_set = new THashSet<Variant>();
                  TSet _set10 = iprot.ReadSetBegin();
                  for( int _i11 = 0; _i11 < _set10.Count; ++_i11)
                  {
                    Variant _elem12;
                    _elem12 = new Variant();
                    _elem12.Read(iprot);
                    V_set.Add(_elem12);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Map) {
                {
                  V_map = new Dictionary<Variant, Variant>();
                  TMap _map13 = iprot.ReadMapBegin();
                  for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                  {
                    Variant _key15;
                    Variant _val16;
                    _key15 = new Variant();
                    _key15.Read(iprot);
                    _val16 = new Variant();
                    _val16.Read(iprot);
                    V_map[_key15] = _val16;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.String) {
                V_big_decimal = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Struct) {
                V_amount = new Amount();
                V_amount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.String) {
                V_byte_array = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Variant");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (V_null != null && __isset.v_null) {
          field.Name = "v_null";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(V_null);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_void) {
          field.Name = "v_void";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(V_void);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_boolean) {
          field.Name = "v_boolean";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(V_boolean);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_boolean_box) {
          field.Name = "v_boolean_box";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(V_boolean_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_byte) {
          field.Name = "v_byte";
          field.Type = TType.Byte;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(V_byte);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_byte_box) {
          field.Name = "v_byte_box";
          field.Type = TType.Byte;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(V_byte_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_short) {
          field.Name = "v_short";
          field.Type = TType.I16;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(V_short);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_short_box) {
          field.Name = "v_short_box";
          field.Type = TType.I16;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(V_short_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_int) {
          field.Name = "v_int";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(V_int);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_int_box) {
          field.Name = "v_int_box";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(V_int_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_long) {
          field.Name = "v_long";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(V_long);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_long_box) {
          field.Name = "v_long_box";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(V_long_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_float) {
          field.Name = "v_float";
          field.Type = TType.Double;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V_float);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_float_box) {
          field.Name = "v_float_box";
          field.Type = TType.Double;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V_float_box);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_double) {
          field.Name = "v_double";
          field.Type = TType.Double;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V_double);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_double_box) {
          field.Name = "v_double_box";
          field.Type = TType.Double;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V_double_box);
          oprot.WriteFieldEnd();
        }
        if (V_string != null && __isset.v_string) {
          field.Name = "v_string";
          field.Type = TType.String;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(V_string);
          oprot.WriteFieldEnd();
        }
        if (V_object != null && __isset.v_object) {
          field.Name = "v_object";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          V_object.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (V_array != null && __isset.v_array) {
          field.Name = "v_array";
          field.Type = TType.List;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, V_array.Count));
            foreach (Variant _iter17 in V_array)
            {
              _iter17.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_list != null && __isset.v_list) {
          field.Name = "v_list";
          field.Type = TType.List;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, V_list.Count));
            foreach (Variant _iter18 in V_list)
            {
              _iter18.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_set != null && __isset.v_set) {
          field.Name = "v_set";
          field.Type = TType.Set;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, V_set.Count));
            foreach (Variant _iter19 in V_set)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_map != null && __isset.v_map) {
          field.Name = "v_map";
          field.Type = TType.Map;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, V_map.Count));
            foreach (Variant _iter20 in V_map.Keys)
            {
              _iter20.Write(oprot);
              V_map[_iter20].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_big_decimal != null && __isset.v_big_decimal) {
          field.Name = "v_big_decimal";
          field.Type = TType.String;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(V_big_decimal);
          oprot.WriteFieldEnd();
        }
        if (V_amount != null && __isset.v_amount) {
          field.Name = "v_amount";
          field.Type = TType.Struct;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          V_amount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (V_byte_array != null && __isset.v_byte_array) {
          field.Name = "v_byte_array";
          field.Type = TType.String;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(V_byte_array);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Variant(");
      bool __first = true;
      if (V_null != null && __isset.v_null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_null: ");
        __sb.Append(V_null);
      }
      if (__isset.v_void) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_void: ");
        __sb.Append(V_void);
      }
      if (__isset.v_boolean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_boolean: ");
        __sb.Append(V_boolean);
      }
      if (__isset.v_boolean_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_boolean_box: ");
        __sb.Append(V_boolean_box);
      }
      if (__isset.v_byte) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_byte: ");
        __sb.Append(V_byte);
      }
      if (__isset.v_byte_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_byte_box: ");
        __sb.Append(V_byte_box);
      }
      if (__isset.v_short) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_short: ");
        __sb.Append(V_short);
      }
      if (__isset.v_short_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_short_box: ");
        __sb.Append(V_short_box);
      }
      if (__isset.v_int) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_int: ");
        __sb.Append(V_int);
      }
      if (__isset.v_int_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_int_box: ");
        __sb.Append(V_int_box);
      }
      if (__isset.v_long) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_long: ");
        __sb.Append(V_long);
      }
      if (__isset.v_long_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_long_box: ");
        __sb.Append(V_long_box);
      }
      if (__isset.v_float) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_float: ");
        __sb.Append(V_float);
      }
      if (__isset.v_float_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_float_box: ");
        __sb.Append(V_float_box);
      }
      if (__isset.v_double) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_double: ");
        __sb.Append(V_double);
      }
      if (__isset.v_double_box) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_double_box: ");
        __sb.Append(V_double_box);
      }
      if (V_string != null && __isset.v_string) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_string: ");
        __sb.Append(V_string);
      }
      if (V_object != null && __isset.v_object) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_object: ");
        __sb.Append(V_object== null ? "<null>" : V_object.ToString());
      }
      if (V_array != null && __isset.v_array) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_array: ");
        __sb.Append(V_array);
      }
      if (V_list != null && __isset.v_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_list: ");
        __sb.Append(V_list);
      }
      if (V_set != null && __isset.v_set) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_set: ");
        __sb.Append(V_set);
      }
      if (V_map != null && __isset.v_map) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_map: ");
        __sb.Append(V_map);
      }
      if (V_big_decimal != null && __isset.v_big_decimal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_big_decimal: ");
        __sb.Append(V_big_decimal);
      }
      if (V_amount != null && __isset.v_amount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_amount: ");
        __sb.Append(V_amount== null ? "<null>" : V_amount.ToString());
      }
      if (V_byte_array != null && __isset.v_byte_array) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_byte_array: ");
        __sb.Append(V_byte_array);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
