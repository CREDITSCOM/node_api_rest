/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{
  public partial class API {
    public interface ISync {
      WalletDataGetResult WalletDataGet(byte[] address);
      WalletIdGetResult WalletIdGet(byte[] address);
      WalletTransactionsCountGetResult WalletTransactionsCountGet(byte[] address);
      WalletBalanceGetResult WalletBalanceGet(byte[] address);
      TransactionGetResult TransactionGet(TransactionId transactionId);
      TransactionsGetResult TransactionsGet(byte[] address, long offset, long limit);
      TransactionFlowResult TransactionFlow(Transaction transaction);
      TransactionsGetResult TransactionsListGet(long offset, long limit);
      byte[] GetLastHash();
      PoolListGetResult PoolListGetStable(long sequence, long limit);
      PoolListGetResult PoolListGet(long offset, long limit);
      PoolInfoGetResult PoolInfoGet(long sequence, long index);
      PoolTransactionsGetResult PoolTransactionsGet(long sequence, long offset, long limit);
      StatsGetResult StatsGet();
      SmartContractGetResult SmartContractGet(byte[] address);
      SmartContractsListGetResult SmartContractsListGet(byte[] deployer, long offset, long limit);
      SmartContractAddressesListGetResult SmartContractAddressesListGet(byte[] deployer);
      byte[] WaitForBlock(byte[] obsolete);
      TransactionId WaitForSmartTransaction(byte[] smart_public);
      SmartContractsListGetResult SmartContractsAllListGet(long offset, long limit);
      TransactionsStateGetResult TransactionsStateGet(byte[] address, List<long> id);
      ContractAllMethodsGetResult ContractAllMethodsGet(List<NodeApi.ByteCodeObject> byteCodeObjects);
      SmartMethodParamsGetResult SmartMethodParamsGet(byte[] address, long id);
      SmartContractDataResult SmartContractDataGet(byte[] address);
      SmartContractCompileResult SmartContractCompile(string sourceCode);
      TokenBalancesResult TokenBalancesGet(byte[] address);
      TokenTransfersResult TokenTransfersGet(byte[] token, long offset, long limit);
      TokenTransfersResult TokenTransferGet(byte[] token, TransactionId id);
      TokenTransfersResult TokenTransfersListGet(long offset, long limit);
      TokenTransfersResult TokenWalletTransfersGet(byte[] token, byte[] address, long offset, long limit);
      TokenTransactionsResult TokenTransactionsGet(byte[] token, long offset, long limit);
      TokenInfoResult TokenInfoGet(byte[] token);
      TokenHoldersResult TokenHoldersGet(byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc);
      TokensListResult TokensListGet(long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters);
      WalletsGetResult WalletsGet(long offset, long limit, sbyte ordCol, bool desc);
      TrustedGetResult TrustedGet(int page);
      SyncStateResult SyncStateGet();
      ExecuteCountGetResult ExecuteCountGet(string executeMethod);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_WalletDataGet(AsyncCallback callback, object state, byte[] address);
      WalletDataGetResult End_WalletDataGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WalletIdGet(AsyncCallback callback, object state, byte[] address);
      WalletIdGetResult End_WalletIdGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WalletTransactionsCountGet(AsyncCallback callback, object state, byte[] address);
      WalletTransactionsCountGetResult End_WalletTransactionsCountGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WalletBalanceGet(AsyncCallback callback, object state, byte[] address);
      WalletBalanceGetResult End_WalletBalanceGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId);
      TransactionGetResult End_TransactionGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit);
      TransactionsGetResult End_TransactionsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionFlow(AsyncCallback callback, object state, Transaction transaction);
      TransactionFlowResult End_TransactionFlow(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionsListGet(AsyncCallback callback, object state, long offset, long limit);
      TransactionsGetResult End_TransactionsListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetLastHash(AsyncCallback callback, object state);
      byte[] End_GetLastHash(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolListGetStable(AsyncCallback callback, object state, long sequence, long limit);
      PoolListGetResult End_PoolListGetStable(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolListGet(AsyncCallback callback, object state, long offset, long limit);
      PoolListGetResult End_PoolListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolInfoGet(AsyncCallback callback, object state, long sequence, long index);
      PoolInfoGetResult End_PoolInfoGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolTransactionsGet(AsyncCallback callback, object state, long sequence, long offset, long limit);
      PoolTransactionsGetResult End_PoolTransactionsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_StatsGet(AsyncCallback callback, object state);
      StatsGetResult End_StatsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractGet(AsyncCallback callback, object state, byte[] address);
      SmartContractGetResult End_SmartContractGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer, long offset, long limit);
      SmartContractsListGetResult End_SmartContractsListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer);
      SmartContractAddressesListGetResult End_SmartContractAddressesListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WaitForBlock(AsyncCallback callback, object state, byte[] obsolete);
      byte[] End_WaitForBlock(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public);
      TransactionId End_WaitForSmartTransaction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit);
      SmartContractsListGetResult End_SmartContractsAllListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionsStateGet(AsyncCallback callback, object state, byte[] address, List<long> id);
      TransactionsStateGetResult End_TransactionsStateGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ContractAllMethodsGet(AsyncCallback callback, object state, List<NodeApi.ByteCodeObject> byteCodeObjects);
      ContractAllMethodsGetResult End_ContractAllMethodsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartMethodParamsGet(AsyncCallback callback, object state, byte[] address, long id);
      SmartMethodParamsGetResult End_SmartMethodParamsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractDataGet(AsyncCallback callback, object state, byte[] address);
      SmartContractDataResult End_SmartContractDataGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractCompile(AsyncCallback callback, object state, string sourceCode);
      SmartContractCompileResult End_SmartContractCompile(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenBalancesGet(AsyncCallback callback, object state, byte[] address);
      TokenBalancesResult End_TokenBalancesGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenTransfersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit);
      TokenTransfersResult End_TokenTransfersGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenTransferGet(AsyncCallback callback, object state, byte[] token, TransactionId id);
      TokenTransfersResult End_TokenTransferGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenTransfersListGet(AsyncCallback callback, object state, long offset, long limit);
      TokenTransfersResult End_TokenTransfersListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenWalletTransfersGet(AsyncCallback callback, object state, byte[] token, byte[] address, long offset, long limit);
      TokenTransfersResult End_TokenWalletTransfersGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenTransactionsGet(AsyncCallback callback, object state, byte[] token, long offset, long limit);
      TokenTransactionsResult End_TokenTransactionsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenInfoGet(AsyncCallback callback, object state, byte[] token);
      TokenInfoResult End_TokenInfoGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokenHoldersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc);
      TokenHoldersResult End_TokenHoldersGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TokensListGet(AsyncCallback callback, object state, long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters);
      TokensListResult End_TokensListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WalletsGet(AsyncCallback callback, object state, long offset, long limit, sbyte ordCol, bool desc);
      WalletsGetResult End_WalletsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TrustedGet(AsyncCallback callback, object state, int page);
      TrustedGetResult End_TrustedGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SyncStateGet(AsyncCallback callback, object state);
      SyncStateResult End_SyncStateGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ExecuteCountGet(AsyncCallback callback, object state, string executeMethod);
      ExecuteCountGetResult End_ExecuteCountGet(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WalletDataGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_WalletDataGet(callback, state, address);
      }

      public WalletDataGetResult End_WalletDataGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WalletDataGet();
      }

      #endif

      public WalletDataGetResult WalletDataGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WalletDataGet(null, null, address);
        return End_WalletDataGet(asyncResult);

        #else
        send_WalletDataGet(address);
        return recv_WalletDataGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WalletDataGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletDataGet", TMessageType.Call, seqid_));
        WalletDataGet_args args = new WalletDataGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WalletDataGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletDataGet", TMessageType.Call, seqid_));
        WalletDataGet_args args = new WalletDataGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public WalletDataGetResult recv_WalletDataGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WalletDataGet_result result = new WalletDataGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WalletDataGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WalletIdGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_WalletIdGet(callback, state, address);
      }

      public WalletIdGetResult End_WalletIdGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WalletIdGet();
      }

      #endif

      public WalletIdGetResult WalletIdGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WalletIdGet(null, null, address);
        return End_WalletIdGet(asyncResult);

        #else
        send_WalletIdGet(address);
        return recv_WalletIdGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WalletIdGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletIdGet", TMessageType.Call, seqid_));
        WalletIdGet_args args = new WalletIdGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WalletIdGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletIdGet", TMessageType.Call, seqid_));
        WalletIdGet_args args = new WalletIdGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public WalletIdGetResult recv_WalletIdGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WalletIdGet_result result = new WalletIdGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WalletIdGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WalletTransactionsCountGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_WalletTransactionsCountGet(callback, state, address);
      }

      public WalletTransactionsCountGetResult End_WalletTransactionsCountGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WalletTransactionsCountGet();
      }

      #endif

      public WalletTransactionsCountGetResult WalletTransactionsCountGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WalletTransactionsCountGet(null, null, address);
        return End_WalletTransactionsCountGet(asyncResult);

        #else
        send_WalletTransactionsCountGet(address);
        return recv_WalletTransactionsCountGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WalletTransactionsCountGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletTransactionsCountGet", TMessageType.Call, seqid_));
        WalletTransactionsCountGet_args args = new WalletTransactionsCountGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WalletTransactionsCountGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletTransactionsCountGet", TMessageType.Call, seqid_));
        WalletTransactionsCountGet_args args = new WalletTransactionsCountGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public WalletTransactionsCountGetResult recv_WalletTransactionsCountGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WalletTransactionsCountGet_result result = new WalletTransactionsCountGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WalletTransactionsCountGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WalletBalanceGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_WalletBalanceGet(callback, state, address);
      }

      public WalletBalanceGetResult End_WalletBalanceGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WalletBalanceGet();
      }

      #endif

      public WalletBalanceGetResult WalletBalanceGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WalletBalanceGet(null, null, address);
        return End_WalletBalanceGet(asyncResult);

        #else
        send_WalletBalanceGet(address);
        return recv_WalletBalanceGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WalletBalanceGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletBalanceGet", TMessageType.Call, seqid_));
        WalletBalanceGet_args args = new WalletBalanceGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WalletBalanceGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletBalanceGet", TMessageType.Call, seqid_));
        WalletBalanceGet_args args = new WalletBalanceGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public WalletBalanceGetResult recv_WalletBalanceGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WalletBalanceGet_result result = new WalletBalanceGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WalletBalanceGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId)
      {
        return send_TransactionGet(callback, state, transactionId);
      }

      public TransactionGetResult End_TransactionGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionGet();
      }

      #endif

      public TransactionGetResult TransactionGet(TransactionId transactionId)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransactionGet(null, null, transactionId);
        return End_TransactionGet(asyncResult);

        #else
        send_TransactionGet(transactionId);
        return recv_TransactionGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Call, seqid_));
        TransactionGet_args args = new TransactionGet_args();
        args.TransactionId = transactionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransactionGet(TransactionId transactionId)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Call, seqid_));
        TransactionGet_args args = new TransactionGet_args();
        args.TransactionId = transactionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionGetResult recv_TransactionGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionGet_result result = new TransactionGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit)
      {
        return send_TransactionsGet(callback, state, address, offset, limit);
      }

      public TransactionsGetResult End_TransactionsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionsGet();
      }

      #endif

      public TransactionsGetResult TransactionsGet(byte[] address, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransactionsGet(null, null, address, offset, limit);
        return End_TransactionsGet(asyncResult);

        #else
        send_TransactionsGet(address, offset, limit);
        return recv_TransactionsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Call, seqid_));
        TransactionsGet_args args = new TransactionsGet_args();
        args.Address = address;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransactionsGet(byte[] address, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Call, seqid_));
        TransactionsGet_args args = new TransactionsGet_args();
        args.Address = address;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionsGetResult recv_TransactionsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionsGet_result result = new TransactionsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransactionFlow(AsyncCallback callback, object state, Transaction transaction)
      {
        return send_TransactionFlow(callback, state, transaction);
      }

      public TransactionFlowResult End_TransactionFlow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionFlow();
      }

      #endif

      public TransactionFlowResult TransactionFlow(Transaction transaction)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransactionFlow(null, null, transaction);
        return End_TransactionFlow(asyncResult);

        #else
        send_TransactionFlow(transaction);
        return recv_TransactionFlow();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionFlow(AsyncCallback callback, object state, Transaction transaction)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Call, seqid_));
        TransactionFlow_args args = new TransactionFlow_args();
        args.Transaction = transaction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransactionFlow(Transaction transaction)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Call, seqid_));
        TransactionFlow_args args = new TransactionFlow_args();
        args.Transaction = transaction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionFlowResult recv_TransactionFlow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionFlow_result result = new TransactionFlow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionFlow failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransactionsListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_TransactionsListGet(callback, state, offset, limit);
      }

      public TransactionsGetResult End_TransactionsListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionsListGet();
      }

      #endif

      public TransactionsGetResult TransactionsListGet(long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransactionsListGet(null, null, offset, limit);
        return End_TransactionsListGet(asyncResult);

        #else
        send_TransactionsListGet(offset, limit);
        return recv_TransactionsListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionsListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsListGet", TMessageType.Call, seqid_));
        TransactionsListGet_args args = new TransactionsListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransactionsListGet(long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsListGet", TMessageType.Call, seqid_));
        TransactionsListGet_args args = new TransactionsListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionsGetResult recv_TransactionsListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionsListGet_result result = new TransactionsListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionsListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetLastHash(AsyncCallback callback, object state)
      {
        return send_GetLastHash(callback, state);
      }

      public byte[] End_GetLastHash(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLastHash();
      }

      #endif

      public byte[] GetLastHash()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetLastHash(null, null);
        return End_GetLastHash(asyncResult);

        #else
        send_GetLastHash();
        return recv_GetLastHash();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLastHash(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Call, seqid_));
        GetLastHash_args args = new GetLastHash_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetLastHash()
      {
        oprot_.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Call, seqid_));
        GetLastHash_args args = new GetLastHash_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public byte[] recv_GetLastHash()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLastHash_result result = new GetLastHash_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLastHash failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_PoolListGetStable(AsyncCallback callback, object state, long sequence, long limit)
      {
        return send_PoolListGetStable(callback, state, sequence, limit);
      }

      public PoolListGetResult End_PoolListGetStable(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolListGetStable();
      }

      #endif

      public PoolListGetResult PoolListGetStable(long sequence, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_PoolListGetStable(null, null, sequence, limit);
        return End_PoolListGetStable(asyncResult);

        #else
        send_PoolListGetStable(sequence, limit);
        return recv_PoolListGetStable();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolListGetStable(AsyncCallback callback, object state, long sequence, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Call, seqid_));
        PoolListGetStable_args args = new PoolListGetStable_args();
        args.Sequence = sequence;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_PoolListGetStable(long sequence, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Call, seqid_));
        PoolListGetStable_args args = new PoolListGetStable_args();
        args.Sequence = sequence;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public PoolListGetResult recv_PoolListGetStable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolListGetStable_result result = new PoolListGetStable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolListGetStable failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_PoolListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_PoolListGet(callback, state, offset, limit);
      }

      public PoolListGetResult End_PoolListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolListGet();
      }

      #endif

      public PoolListGetResult PoolListGet(long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_PoolListGet(null, null, offset, limit);
        return End_PoolListGet(asyncResult);

        #else
        send_PoolListGet(offset, limit);
        return recv_PoolListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Call, seqid_));
        PoolListGet_args args = new PoolListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_PoolListGet(long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Call, seqid_));
        PoolListGet_args args = new PoolListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public PoolListGetResult recv_PoolListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolListGet_result result = new PoolListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_PoolInfoGet(AsyncCallback callback, object state, long sequence, long index)
      {
        return send_PoolInfoGet(callback, state, sequence, index);
      }

      public PoolInfoGetResult End_PoolInfoGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolInfoGet();
      }

      #endif

      public PoolInfoGetResult PoolInfoGet(long sequence, long index)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_PoolInfoGet(null, null, sequence, index);
        return End_PoolInfoGet(asyncResult);

        #else
        send_PoolInfoGet(sequence, index);
        return recv_PoolInfoGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolInfoGet(AsyncCallback callback, object state, long sequence, long index)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Call, seqid_));
        PoolInfoGet_args args = new PoolInfoGet_args();
        args.Sequence = sequence;
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_PoolInfoGet(long sequence, long index)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Call, seqid_));
        PoolInfoGet_args args = new PoolInfoGet_args();
        args.Sequence = sequence;
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public PoolInfoGetResult recv_PoolInfoGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolInfoGet_result result = new PoolInfoGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolInfoGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_PoolTransactionsGet(AsyncCallback callback, object state, long sequence, long offset, long limit)
      {
        return send_PoolTransactionsGet(callback, state, sequence, offset, limit);
      }

      public PoolTransactionsGetResult End_PoolTransactionsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolTransactionsGet();
      }

      #endif

      public PoolTransactionsGetResult PoolTransactionsGet(long sequence, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_PoolTransactionsGet(null, null, sequence, offset, limit);
        return End_PoolTransactionsGet(asyncResult);

        #else
        send_PoolTransactionsGet(sequence, offset, limit);
        return recv_PoolTransactionsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolTransactionsGet(AsyncCallback callback, object state, long sequence, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Call, seqid_));
        PoolTransactionsGet_args args = new PoolTransactionsGet_args();
        args.Sequence = sequence;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_PoolTransactionsGet(long sequence, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Call, seqid_));
        PoolTransactionsGet_args args = new PoolTransactionsGet_args();
        args.Sequence = sequence;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public PoolTransactionsGetResult recv_PoolTransactionsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolTransactionsGet_result result = new PoolTransactionsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolTransactionsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_StatsGet(AsyncCallback callback, object state)
      {
        return send_StatsGet(callback, state);
      }

      public StatsGetResult End_StatsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_StatsGet();
      }

      #endif

      public StatsGetResult StatsGet()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_StatsGet(null, null);
        return End_StatsGet(asyncResult);

        #else
        send_StatsGet();
        return recv_StatsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_StatsGet(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Call, seqid_));
        StatsGet_args args = new StatsGet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_StatsGet()
      {
        oprot_.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Call, seqid_));
        StatsGet_args args = new StatsGet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public StatsGetResult recv_StatsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        StatsGet_result result = new StatsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StatsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_SmartContractGet(callback, state, address);
      }

      public SmartContractGetResult End_SmartContractGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractGet();
      }

      #endif

      public SmartContractGetResult SmartContractGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractGet(null, null, address);
        return End_SmartContractGet(asyncResult);

        #else
        send_SmartContractGet(address);
        return recv_SmartContractGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Call, seqid_));
        SmartContractGet_args args = new SmartContractGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Call, seqid_));
        SmartContractGet_args args = new SmartContractGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractGetResult recv_SmartContractGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractGet_result result = new SmartContractGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer, long offset, long limit)
      {
        return send_SmartContractsListGet(callback, state, deployer, offset, limit);
      }

      public SmartContractsListGetResult End_SmartContractsListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractsListGet();
      }

      #endif

      public SmartContractsListGetResult SmartContractsListGet(byte[] deployer, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractsListGet(null, null, deployer, offset, limit);
        return End_SmartContractsListGet(asyncResult);

        #else
        send_SmartContractsListGet(deployer, offset, limit);
        return recv_SmartContractsListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Call, seqid_));
        SmartContractsListGet_args args = new SmartContractsListGet_args();
        args.Deployer = deployer;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractsListGet(byte[] deployer, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Call, seqid_));
        SmartContractsListGet_args args = new SmartContractsListGet_args();
        args.Deployer = deployer;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractsListGetResult recv_SmartContractsListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractsListGet_result result = new SmartContractsListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractsListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer)
      {
        return send_SmartContractAddressesListGet(callback, state, deployer);
      }

      public SmartContractAddressesListGetResult End_SmartContractAddressesListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractAddressesListGet();
      }

      #endif

      public SmartContractAddressesListGetResult SmartContractAddressesListGet(byte[] deployer)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractAddressesListGet(null, null, deployer);
        return End_SmartContractAddressesListGet(asyncResult);

        #else
        send_SmartContractAddressesListGet(deployer);
        return recv_SmartContractAddressesListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Call, seqid_));
        SmartContractAddressesListGet_args args = new SmartContractAddressesListGet_args();
        args.Deployer = deployer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractAddressesListGet(byte[] deployer)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Call, seqid_));
        SmartContractAddressesListGet_args args = new SmartContractAddressesListGet_args();
        args.Deployer = deployer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractAddressesListGetResult recv_SmartContractAddressesListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractAddressesListGet_result result = new SmartContractAddressesListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractAddressesListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WaitForBlock(AsyncCallback callback, object state, byte[] obsolete)
      {
        return send_WaitForBlock(callback, state, obsolete);
      }

      public byte[] End_WaitForBlock(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WaitForBlock();
      }

      #endif

      public byte[] WaitForBlock(byte[] obsolete)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WaitForBlock(null, null, obsolete);
        return End_WaitForBlock(asyncResult);

        #else
        send_WaitForBlock(obsolete);
        return recv_WaitForBlock();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WaitForBlock(AsyncCallback callback, object state, byte[] obsolete)
      {
        oprot_.WriteMessageBegin(new TMessage("WaitForBlock", TMessageType.Call, seqid_));
        WaitForBlock_args args = new WaitForBlock_args();
        args.Obsolete = obsolete;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WaitForBlock(byte[] obsolete)
      {
        oprot_.WriteMessageBegin(new TMessage("WaitForBlock", TMessageType.Call, seqid_));
        WaitForBlock_args args = new WaitForBlock_args();
        args.Obsolete = obsolete;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public byte[] recv_WaitForBlock()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WaitForBlock_result result = new WaitForBlock_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WaitForBlock failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public)
      {
        return send_WaitForSmartTransaction(callback, state, smart_public);
      }

      public TransactionId End_WaitForSmartTransaction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WaitForSmartTransaction();
      }

      #endif

      public TransactionId WaitForSmartTransaction(byte[] smart_public)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WaitForSmartTransaction(null, null, smart_public);
        return End_WaitForSmartTransaction(asyncResult);

        #else
        send_WaitForSmartTransaction(smart_public);
        return recv_WaitForSmartTransaction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public)
      {
        oprot_.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Call, seqid_));
        WaitForSmartTransaction_args args = new WaitForSmartTransaction_args();
        args.Smart_public = smart_public;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WaitForSmartTransaction(byte[] smart_public)
      {
        oprot_.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Call, seqid_));
        WaitForSmartTransaction_args args = new WaitForSmartTransaction_args();
        args.Smart_public = smart_public;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionId recv_WaitForSmartTransaction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WaitForSmartTransaction_result result = new WaitForSmartTransaction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WaitForSmartTransaction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_SmartContractsAllListGet(callback, state, offset, limit);
      }

      public SmartContractsListGetResult End_SmartContractsAllListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractsAllListGet();
      }

      #endif

      public SmartContractsListGetResult SmartContractsAllListGet(long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractsAllListGet(null, null, offset, limit);
        return End_SmartContractsAllListGet(asyncResult);

        #else
        send_SmartContractsAllListGet(offset, limit);
        return recv_SmartContractsAllListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Call, seqid_));
        SmartContractsAllListGet_args args = new SmartContractsAllListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractsAllListGet(long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Call, seqid_));
        SmartContractsAllListGet_args args = new SmartContractsAllListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractsListGetResult recv_SmartContractsAllListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractsAllListGet_result result = new SmartContractsAllListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractsAllListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransactionsStateGet(AsyncCallback callback, object state, byte[] address, List<long> id)
      {
        return send_TransactionsStateGet(callback, state, address, id);
      }

      public TransactionsStateGetResult End_TransactionsStateGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionsStateGet();
      }

      #endif

      public TransactionsStateGetResult TransactionsStateGet(byte[] address, List<long> id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransactionsStateGet(null, null, address, id);
        return End_TransactionsStateGet(asyncResult);

        #else
        send_TransactionsStateGet(address, id);
        return recv_TransactionsStateGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionsStateGet(AsyncCallback callback, object state, byte[] address, List<long> id)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsStateGet", TMessageType.Call, seqid_));
        TransactionsStateGet_args args = new TransactionsStateGet_args();
        args.Address = address;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransactionsStateGet(byte[] address, List<long> id)
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsStateGet", TMessageType.Call, seqid_));
        TransactionsStateGet_args args = new TransactionsStateGet_args();
        args.Address = address;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TransactionsStateGetResult recv_TransactionsStateGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionsStateGet_result result = new TransactionsStateGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionsStateGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ContractAllMethodsGet(AsyncCallback callback, object state, List<NodeApi.ByteCodeObject> byteCodeObjects)
      {
        return send_ContractAllMethodsGet(callback, state, byteCodeObjects);
      }

      public ContractAllMethodsGetResult End_ContractAllMethodsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ContractAllMethodsGet();
      }

      #endif

      public ContractAllMethodsGetResult ContractAllMethodsGet(List<NodeApi.ByteCodeObject> byteCodeObjects)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ContractAllMethodsGet(null, null, byteCodeObjects);
        return End_ContractAllMethodsGet(asyncResult);

        #else
        send_ContractAllMethodsGet(byteCodeObjects);
        return recv_ContractAllMethodsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ContractAllMethodsGet(AsyncCallback callback, object state, List<NodeApi.ByteCodeObject> byteCodeObjects)
      {
        oprot_.WriteMessageBegin(new TMessage("ContractAllMethodsGet", TMessageType.Call, seqid_));
        ContractAllMethodsGet_args args = new ContractAllMethodsGet_args();
        args.ByteCodeObjects = byteCodeObjects;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ContractAllMethodsGet(List<NodeApi.ByteCodeObject> byteCodeObjects)
      {
        oprot_.WriteMessageBegin(new TMessage("ContractAllMethodsGet", TMessageType.Call, seqid_));
        ContractAllMethodsGet_args args = new ContractAllMethodsGet_args();
        args.ByteCodeObjects = byteCodeObjects;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public ContractAllMethodsGetResult recv_ContractAllMethodsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ContractAllMethodsGet_result result = new ContractAllMethodsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ContractAllMethodsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartMethodParamsGet(AsyncCallback callback, object state, byte[] address, long id)
      {
        return send_SmartMethodParamsGet(callback, state, address, id);
      }

      public SmartMethodParamsGetResult End_SmartMethodParamsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartMethodParamsGet();
      }

      #endif

      public SmartMethodParamsGetResult SmartMethodParamsGet(byte[] address, long id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartMethodParamsGet(null, null, address, id);
        return End_SmartMethodParamsGet(asyncResult);

        #else
        send_SmartMethodParamsGet(address, id);
        return recv_SmartMethodParamsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartMethodParamsGet(AsyncCallback callback, object state, byte[] address, long id)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartMethodParamsGet", TMessageType.Call, seqid_));
        SmartMethodParamsGet_args args = new SmartMethodParamsGet_args();
        args.Address = address;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartMethodParamsGet(byte[] address, long id)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartMethodParamsGet", TMessageType.Call, seqid_));
        SmartMethodParamsGet_args args = new SmartMethodParamsGet_args();
        args.Address = address;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartMethodParamsGetResult recv_SmartMethodParamsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartMethodParamsGet_result result = new SmartMethodParamsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartMethodParamsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractDataGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_SmartContractDataGet(callback, state, address);
      }

      public SmartContractDataResult End_SmartContractDataGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractDataGet();
      }

      #endif

      public SmartContractDataResult SmartContractDataGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractDataGet(null, null, address);
        return End_SmartContractDataGet(asyncResult);

        #else
        send_SmartContractDataGet(address);
        return recv_SmartContractDataGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractDataGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractDataGet", TMessageType.Call, seqid_));
        SmartContractDataGet_args args = new SmartContractDataGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractDataGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractDataGet", TMessageType.Call, seqid_));
        SmartContractDataGet_args args = new SmartContractDataGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractDataResult recv_SmartContractDataGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractDataGet_result result = new SmartContractDataGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractDataGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SmartContractCompile(AsyncCallback callback, object state, string sourceCode)
      {
        return send_SmartContractCompile(callback, state, sourceCode);
      }

      public SmartContractCompileResult End_SmartContractCompile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractCompile();
      }

      #endif

      public SmartContractCompileResult SmartContractCompile(string sourceCode)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SmartContractCompile(null, null, sourceCode);
        return End_SmartContractCompile(asyncResult);

        #else
        send_SmartContractCompile(sourceCode);
        return recv_SmartContractCompile();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractCompile(AsyncCallback callback, object state, string sourceCode)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractCompile", TMessageType.Call, seqid_));
        SmartContractCompile_args args = new SmartContractCompile_args();
        args.SourceCode = sourceCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SmartContractCompile(string sourceCode)
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractCompile", TMessageType.Call, seqid_));
        SmartContractCompile_args args = new SmartContractCompile_args();
        args.SourceCode = sourceCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SmartContractCompileResult recv_SmartContractCompile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractCompile_result result = new SmartContractCompile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractCompile failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenBalancesGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_TokenBalancesGet(callback, state, address);
      }

      public TokenBalancesResult End_TokenBalancesGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenBalancesGet();
      }

      #endif

      public TokenBalancesResult TokenBalancesGet(byte[] address)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenBalancesGet(null, null, address);
        return End_TokenBalancesGet(asyncResult);

        #else
        send_TokenBalancesGet(address);
        return recv_TokenBalancesGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenBalancesGet(AsyncCallback callback, object state, byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenBalancesGet", TMessageType.Call, seqid_));
        TokenBalancesGet_args args = new TokenBalancesGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenBalancesGet(byte[] address)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenBalancesGet", TMessageType.Call, seqid_));
        TokenBalancesGet_args args = new TokenBalancesGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenBalancesResult recv_TokenBalancesGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenBalancesGet_result result = new TokenBalancesGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenBalancesGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenTransfersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit)
      {
        return send_TokenTransfersGet(callback, state, token, offset, limit);
      }

      public TokenTransfersResult End_TokenTransfersGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenTransfersGet();
      }

      #endif

      public TokenTransfersResult TokenTransfersGet(byte[] token, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenTransfersGet(null, null, token, offset, limit);
        return End_TokenTransfersGet(asyncResult);

        #else
        send_TokenTransfersGet(token, offset, limit);
        return recv_TokenTransfersGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenTransfersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransfersGet", TMessageType.Call, seqid_));
        TokenTransfersGet_args args = new TokenTransfersGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenTransfersGet(byte[] token, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransfersGet", TMessageType.Call, seqid_));
        TokenTransfersGet_args args = new TokenTransfersGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenTransfersResult recv_TokenTransfersGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenTransfersGet_result result = new TokenTransfersGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenTransfersGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenTransferGet(AsyncCallback callback, object state, byte[] token, TransactionId id)
      {
        return send_TokenTransferGet(callback, state, token, id);
      }

      public TokenTransfersResult End_TokenTransferGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenTransferGet();
      }

      #endif

      public TokenTransfersResult TokenTransferGet(byte[] token, TransactionId id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenTransferGet(null, null, token, id);
        return End_TokenTransferGet(asyncResult);

        #else
        send_TokenTransferGet(token, id);
        return recv_TokenTransferGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenTransferGet(AsyncCallback callback, object state, byte[] token, TransactionId id)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransferGet", TMessageType.Call, seqid_));
        TokenTransferGet_args args = new TokenTransferGet_args();
        args.Token = token;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenTransferGet(byte[] token, TransactionId id)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransferGet", TMessageType.Call, seqid_));
        TokenTransferGet_args args = new TokenTransferGet_args();
        args.Token = token;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenTransfersResult recv_TokenTransferGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenTransferGet_result result = new TokenTransferGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenTransferGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenTransfersListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_TokenTransfersListGet(callback, state, offset, limit);
      }

      public TokenTransfersResult End_TokenTransfersListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenTransfersListGet();
      }

      #endif

      public TokenTransfersResult TokenTransfersListGet(long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenTransfersListGet(null, null, offset, limit);
        return End_TokenTransfersListGet(asyncResult);

        #else
        send_TokenTransfersListGet(offset, limit);
        return recv_TokenTransfersListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenTransfersListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransfersListGet", TMessageType.Call, seqid_));
        TokenTransfersListGet_args args = new TokenTransfersListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenTransfersListGet(long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransfersListGet", TMessageType.Call, seqid_));
        TokenTransfersListGet_args args = new TokenTransfersListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenTransfersResult recv_TokenTransfersListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenTransfersListGet_result result = new TokenTransfersListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenTransfersListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenWalletTransfersGet(AsyncCallback callback, object state, byte[] token, byte[] address, long offset, long limit)
      {
        return send_TokenWalletTransfersGet(callback, state, token, address, offset, limit);
      }

      public TokenTransfersResult End_TokenWalletTransfersGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenWalletTransfersGet();
      }

      #endif

      public TokenTransfersResult TokenWalletTransfersGet(byte[] token, byte[] address, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenWalletTransfersGet(null, null, token, address, offset, limit);
        return End_TokenWalletTransfersGet(asyncResult);

        #else
        send_TokenWalletTransfersGet(token, address, offset, limit);
        return recv_TokenWalletTransfersGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenWalletTransfersGet(AsyncCallback callback, object state, byte[] token, byte[] address, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenWalletTransfersGet", TMessageType.Call, seqid_));
        TokenWalletTransfersGet_args args = new TokenWalletTransfersGet_args();
        args.Token = token;
        args.Address = address;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenWalletTransfersGet(byte[] token, byte[] address, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenWalletTransfersGet", TMessageType.Call, seqid_));
        TokenWalletTransfersGet_args args = new TokenWalletTransfersGet_args();
        args.Token = token;
        args.Address = address;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenTransfersResult recv_TokenWalletTransfersGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenWalletTransfersGet_result result = new TokenWalletTransfersGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenWalletTransfersGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenTransactionsGet(AsyncCallback callback, object state, byte[] token, long offset, long limit)
      {
        return send_TokenTransactionsGet(callback, state, token, offset, limit);
      }

      public TokenTransactionsResult End_TokenTransactionsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenTransactionsGet();
      }

      #endif

      public TokenTransactionsResult TokenTransactionsGet(byte[] token, long offset, long limit)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenTransactionsGet(null, null, token, offset, limit);
        return End_TokenTransactionsGet(asyncResult);

        #else
        send_TokenTransactionsGet(token, offset, limit);
        return recv_TokenTransactionsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenTransactionsGet(AsyncCallback callback, object state, byte[] token, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransactionsGet", TMessageType.Call, seqid_));
        TokenTransactionsGet_args args = new TokenTransactionsGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenTransactionsGet(byte[] token, long offset, long limit)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenTransactionsGet", TMessageType.Call, seqid_));
        TokenTransactionsGet_args args = new TokenTransactionsGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenTransactionsResult recv_TokenTransactionsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenTransactionsGet_result result = new TokenTransactionsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenTransactionsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenInfoGet(AsyncCallback callback, object state, byte[] token)
      {
        return send_TokenInfoGet(callback, state, token);
      }

      public TokenInfoResult End_TokenInfoGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenInfoGet();
      }

      #endif

      public TokenInfoResult TokenInfoGet(byte[] token)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenInfoGet(null, null, token);
        return End_TokenInfoGet(asyncResult);

        #else
        send_TokenInfoGet(token);
        return recv_TokenInfoGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenInfoGet(AsyncCallback callback, object state, byte[] token)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenInfoGet", TMessageType.Call, seqid_));
        TokenInfoGet_args args = new TokenInfoGet_args();
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenInfoGet(byte[] token)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenInfoGet", TMessageType.Call, seqid_));
        TokenInfoGet_args args = new TokenInfoGet_args();
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenInfoResult recv_TokenInfoGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenInfoGet_result result = new TokenInfoGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenInfoGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokenHoldersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc)
      {
        return send_TokenHoldersGet(callback, state, token, offset, limit, order, desc);
      }

      public TokenHoldersResult End_TokenHoldersGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokenHoldersGet();
      }

      #endif

      public TokenHoldersResult TokenHoldersGet(byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokenHoldersGet(null, null, token, offset, limit, order, desc);
        return End_TokenHoldersGet(asyncResult);

        #else
        send_TokenHoldersGet(token, offset, limit, order, desc);
        return recv_TokenHoldersGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokenHoldersGet(AsyncCallback callback, object state, byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenHoldersGet", TMessageType.Call, seqid_));
        TokenHoldersGet_args args = new TokenHoldersGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Order = order;
        args.Desc = desc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokenHoldersGet(byte[] token, long offset, long limit, TokenHoldersSortField order, bool desc)
      {
        oprot_.WriteMessageBegin(new TMessage("TokenHoldersGet", TMessageType.Call, seqid_));
        TokenHoldersGet_args args = new TokenHoldersGet_args();
        args.Token = token;
        args.Offset = offset;
        args.Limit = limit;
        args.Order = order;
        args.Desc = desc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokenHoldersResult recv_TokenHoldersGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokenHoldersGet_result result = new TokenHoldersGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokenHoldersGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TokensListGet(AsyncCallback callback, object state, long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters)
      {
        return send_TokensListGet(callback, state, offset, limit, order, desc, filters);
      }

      public TokensListResult End_TokensListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TokensListGet();
      }

      #endif

      public TokensListResult TokensListGet(long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TokensListGet(null, null, offset, limit, order, desc, filters);
        return End_TokensListGet(asyncResult);

        #else
        send_TokensListGet(offset, limit, order, desc, filters);
        return recv_TokensListGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TokensListGet(AsyncCallback callback, object state, long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters)
      {
        oprot_.WriteMessageBegin(new TMessage("TokensListGet", TMessageType.Call, seqid_));
        TokensListGet_args args = new TokensListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Order = order;
        args.Desc = desc;
        args.Filters = filters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TokensListGet(long offset, long limit, TokensListSortField order, bool desc, TokenFilters filters)
      {
        oprot_.WriteMessageBegin(new TMessage("TokensListGet", TMessageType.Call, seqid_));
        TokensListGet_args args = new TokensListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Order = order;
        args.Desc = desc;
        args.Filters = filters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TokensListResult recv_TokensListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TokensListGet_result result = new TokensListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TokensListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_WalletsGet(AsyncCallback callback, object state, long offset, long limit, sbyte ordCol, bool desc)
      {
        return send_WalletsGet(callback, state, offset, limit, ordCol, desc);
      }

      public WalletsGetResult End_WalletsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WalletsGet();
      }

      #endif

      public WalletsGetResult WalletsGet(long offset, long limit, sbyte ordCol, bool desc)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_WalletsGet(null, null, offset, limit, ordCol, desc);
        return End_WalletsGet(asyncResult);

        #else
        send_WalletsGet(offset, limit, ordCol, desc);
        return recv_WalletsGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WalletsGet(AsyncCallback callback, object state, long offset, long limit, sbyte ordCol, bool desc)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletsGet", TMessageType.Call, seqid_));
        WalletsGet_args args = new WalletsGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.OrdCol = ordCol;
        args.Desc = desc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_WalletsGet(long offset, long limit, sbyte ordCol, bool desc)
      {
        oprot_.WriteMessageBegin(new TMessage("WalletsGet", TMessageType.Call, seqid_));
        WalletsGet_args args = new WalletsGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.OrdCol = ordCol;
        args.Desc = desc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public WalletsGetResult recv_WalletsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WalletsGet_result result = new WalletsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WalletsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TrustedGet(AsyncCallback callback, object state, int page)
      {
        return send_TrustedGet(callback, state, page);
      }

      public TrustedGetResult End_TrustedGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TrustedGet();
      }

      #endif

      public TrustedGetResult TrustedGet(int page)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TrustedGet(null, null, page);
        return End_TrustedGet(asyncResult);

        #else
        send_TrustedGet(page);
        return recv_TrustedGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TrustedGet(AsyncCallback callback, object state, int page)
      {
        oprot_.WriteMessageBegin(new TMessage("TrustedGet", TMessageType.Call, seqid_));
        TrustedGet_args args = new TrustedGet_args();
        args.Page = page;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TrustedGet(int page)
      {
        oprot_.WriteMessageBegin(new TMessage("TrustedGet", TMessageType.Call, seqid_));
        TrustedGet_args args = new TrustedGet_args();
        args.Page = page;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public TrustedGetResult recv_TrustedGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TrustedGet_result result = new TrustedGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TrustedGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SyncStateGet(AsyncCallback callback, object state)
      {
        return send_SyncStateGet(callback, state);
      }

      public SyncStateResult End_SyncStateGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SyncStateGet();
      }

      #endif

      public SyncStateResult SyncStateGet()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SyncStateGet(null, null);
        return End_SyncStateGet(asyncResult);

        #else
        send_SyncStateGet();
        return recv_SyncStateGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SyncStateGet(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("SyncStateGet", TMessageType.Call, seqid_));
        SyncStateGet_args args = new SyncStateGet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SyncStateGet()
      {
        oprot_.WriteMessageBegin(new TMessage("SyncStateGet", TMessageType.Call, seqid_));
        SyncStateGet_args args = new SyncStateGet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public SyncStateResult recv_SyncStateGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SyncStateGet_result result = new SyncStateGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SyncStateGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ExecuteCountGet(AsyncCallback callback, object state, string executeMethod)
      {
        return send_ExecuteCountGet(callback, state, executeMethod);
      }

      public ExecuteCountGetResult End_ExecuteCountGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExecuteCountGet();
      }

      #endif

      public ExecuteCountGetResult ExecuteCountGet(string executeMethod)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ExecuteCountGet(null, null, executeMethod);
        return End_ExecuteCountGet(asyncResult);

        #else
        send_ExecuteCountGet(executeMethod);
        return recv_ExecuteCountGet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExecuteCountGet(AsyncCallback callback, object state, string executeMethod)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteCountGet", TMessageType.Call, seqid_));
        ExecuteCountGet_args args = new ExecuteCountGet_args();
        args.ExecuteMethod = executeMethod;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ExecuteCountGet(string executeMethod)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteCountGet", TMessageType.Call, seqid_));
        ExecuteCountGet_args args = new ExecuteCountGet_args();
        args.ExecuteMethod = executeMethod;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public ExecuteCountGetResult recv_ExecuteCountGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExecuteCountGet_result result = new ExecuteCountGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteCountGet failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["WalletDataGet"] = WalletDataGet_Process;
        processMap_["WalletIdGet"] = WalletIdGet_Process;
        processMap_["WalletTransactionsCountGet"] = WalletTransactionsCountGet_Process;
        processMap_["WalletBalanceGet"] = WalletBalanceGet_Process;
        processMap_["TransactionGet"] = TransactionGet_Process;
        processMap_["TransactionsGet"] = TransactionsGet_Process;
        processMap_["TransactionFlow"] = TransactionFlow_Process;
        processMap_["TransactionsListGet"] = TransactionsListGet_Process;
        processMap_["GetLastHash"] = GetLastHash_Process;
        processMap_["PoolListGetStable"] = PoolListGetStable_Process;
        processMap_["PoolListGet"] = PoolListGet_Process;
        processMap_["PoolInfoGet"] = PoolInfoGet_Process;
        processMap_["PoolTransactionsGet"] = PoolTransactionsGet_Process;
        processMap_["StatsGet"] = StatsGet_Process;
        processMap_["SmartContractGet"] = SmartContractGet_Process;
        processMap_["SmartContractsListGet"] = SmartContractsListGet_Process;
        processMap_["SmartContractAddressesListGet"] = SmartContractAddressesListGet_Process;
        processMap_["WaitForBlock"] = WaitForBlock_Process;
        processMap_["WaitForSmartTransaction"] = WaitForSmartTransaction_Process;
        processMap_["SmartContractsAllListGet"] = SmartContractsAllListGet_Process;
        processMap_["TransactionsStateGet"] = TransactionsStateGet_Process;
        processMap_["ContractAllMethodsGet"] = ContractAllMethodsGet_Process;
        processMap_["SmartMethodParamsGet"] = SmartMethodParamsGet_Process;
        processMap_["SmartContractDataGet"] = SmartContractDataGet_Process;
        processMap_["SmartContractCompile"] = SmartContractCompile_Process;
        processMap_["TokenBalancesGet"] = TokenBalancesGet_Process;
        processMap_["TokenTransfersGet"] = TokenTransfersGet_Process;
        processMap_["TokenTransferGet"] = TokenTransferGet_Process;
        processMap_["TokenTransfersListGet"] = TokenTransfersListGet_Process;
        processMap_["TokenWalletTransfersGet"] = TokenWalletTransfersGet_Process;
        processMap_["TokenTransactionsGet"] = TokenTransactionsGet_Process;
        processMap_["TokenInfoGet"] = TokenInfoGet_Process;
        processMap_["TokenHoldersGet"] = TokenHoldersGet_Process;
        processMap_["TokensListGet"] = TokensListGet_Process;
        processMap_["WalletsGet"] = WalletsGet_Process;
        processMap_["TrustedGet"] = TrustedGet_Process;
        processMap_["SyncStateGet"] = SyncStateGet_Process;
        processMap_["ExecuteCountGet"] = ExecuteCountGet_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void WalletDataGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WalletDataGet_args args = new WalletDataGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WalletDataGet_result result = new WalletDataGet_result();
        try
        {
          result.Success = iface_.WalletDataGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("WalletDataGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WalletDataGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WalletIdGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WalletIdGet_args args = new WalletIdGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WalletIdGet_result result = new WalletIdGet_result();
        try
        {
          result.Success = iface_.WalletIdGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("WalletIdGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WalletIdGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WalletTransactionsCountGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WalletTransactionsCountGet_args args = new WalletTransactionsCountGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WalletTransactionsCountGet_result result = new WalletTransactionsCountGet_result();
        try
        {
          result.Success = iface_.WalletTransactionsCountGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("WalletTransactionsCountGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WalletTransactionsCountGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WalletBalanceGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WalletBalanceGet_args args = new WalletBalanceGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WalletBalanceGet_result result = new WalletBalanceGet_result();
        try
        {
          result.Success = iface_.WalletBalanceGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("WalletBalanceGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WalletBalanceGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionGet_args args = new TransactionGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionGet_result result = new TransactionGet_result();
        try
        {
          result.Success = iface_.TransactionGet(args.TransactionId);
          oprot.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionsGet_args args = new TransactionsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionsGet_result result = new TransactionsGet_result();
        try
        {
          result.Success = iface_.TransactionsGet(args.Address, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionFlow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionFlow_args args = new TransactionFlow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionFlow_result result = new TransactionFlow_result();
        try
        {
          result.Success = iface_.TransactionFlow(args.Transaction);
          oprot.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionsListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionsListGet_args args = new TransactionsListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionsListGet_result result = new TransactionsListGet_result();
        try
        {
          result.Success = iface_.TransactionsListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TransactionsListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionsListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLastHash_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLastHash_args args = new GetLastHash_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLastHash_result result = new GetLastHash_result();
        try
        {
          result.Success = iface_.GetLastHash();
          oprot.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolListGetStable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolListGetStable_args args = new PoolListGetStable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolListGetStable_result result = new PoolListGetStable_result();
        try
        {
          result.Success = iface_.PoolListGetStable(args.Sequence, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolListGet_args args = new PoolListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolListGet_result result = new PoolListGet_result();
        try
        {
          result.Success = iface_.PoolListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolInfoGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolInfoGet_args args = new PoolInfoGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolInfoGet_result result = new PoolInfoGet_result();
        try
        {
          result.Success = iface_.PoolInfoGet(args.Sequence, args.Index);
          oprot.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolTransactionsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolTransactionsGet_args args = new PoolTransactionsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolTransactionsGet_result result = new PoolTransactionsGet_result();
        try
        {
          result.Success = iface_.PoolTransactionsGet(args.Sequence, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void StatsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        StatsGet_args args = new StatsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        StatsGet_result result = new StatsGet_result();
        try
        {
          result.Success = iface_.StatsGet();
          oprot.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractGet_args args = new SmartContractGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractGet_result result = new SmartContractGet_result();
        try
        {
          result.Success = iface_.SmartContractGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractsListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractsListGet_args args = new SmartContractsListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractsListGet_result result = new SmartContractsListGet_result();
        try
        {
          result.Success = iface_.SmartContractsListGet(args.Deployer, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractAddressesListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractAddressesListGet_args args = new SmartContractAddressesListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractAddressesListGet_result result = new SmartContractAddressesListGet_result();
        try
        {
          result.Success = iface_.SmartContractAddressesListGet(args.Deployer);
          oprot.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WaitForBlock_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WaitForBlock_args args = new WaitForBlock_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WaitForBlock_result result = new WaitForBlock_result();
        try
        {
          result.Success = iface_.WaitForBlock(args.Obsolete);
          oprot.WriteMessageBegin(new TMessage("WaitForBlock", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WaitForBlock", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WaitForSmartTransaction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WaitForSmartTransaction_args args = new WaitForSmartTransaction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WaitForSmartTransaction_result result = new WaitForSmartTransaction_result();
        try
        {
          result.Success = iface_.WaitForSmartTransaction(args.Smart_public);
          oprot.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractsAllListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractsAllListGet_args args = new SmartContractsAllListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractsAllListGet_result result = new SmartContractsAllListGet_result();
        try
        {
          result.Success = iface_.SmartContractsAllListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionsStateGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionsStateGet_args args = new TransactionsStateGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionsStateGet_result result = new TransactionsStateGet_result();
        try
        {
          result.Success = iface_.TransactionsStateGet(args.Address, args.Id);
          oprot.WriteMessageBegin(new TMessage("TransactionsStateGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionsStateGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ContractAllMethodsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ContractAllMethodsGet_args args = new ContractAllMethodsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ContractAllMethodsGet_result result = new ContractAllMethodsGet_result();
        try
        {
          result.Success = iface_.ContractAllMethodsGet(args.ByteCodeObjects);
          oprot.WriteMessageBegin(new TMessage("ContractAllMethodsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ContractAllMethodsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartMethodParamsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartMethodParamsGet_args args = new SmartMethodParamsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartMethodParamsGet_result result = new SmartMethodParamsGet_result();
        try
        {
          result.Success = iface_.SmartMethodParamsGet(args.Address, args.Id);
          oprot.WriteMessageBegin(new TMessage("SmartMethodParamsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartMethodParamsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractDataGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractDataGet_args args = new SmartContractDataGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractDataGet_result result = new SmartContractDataGet_result();
        try
        {
          result.Success = iface_.SmartContractDataGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("SmartContractDataGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractDataGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractCompile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractCompile_args args = new SmartContractCompile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractCompile_result result = new SmartContractCompile_result();
        try
        {
          result.Success = iface_.SmartContractCompile(args.SourceCode);
          oprot.WriteMessageBegin(new TMessage("SmartContractCompile", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractCompile", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenBalancesGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenBalancesGet_args args = new TokenBalancesGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenBalancesGet_result result = new TokenBalancesGet_result();
        try
        {
          result.Success = iface_.TokenBalancesGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("TokenBalancesGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenBalancesGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenTransfersGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenTransfersGet_args args = new TokenTransfersGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenTransfersGet_result result = new TokenTransfersGet_result();
        try
        {
          result.Success = iface_.TokenTransfersGet(args.Token, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TokenTransfersGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenTransfersGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenTransferGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenTransferGet_args args = new TokenTransferGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenTransferGet_result result = new TokenTransferGet_result();
        try
        {
          result.Success = iface_.TokenTransferGet(args.Token, args.Id);
          oprot.WriteMessageBegin(new TMessage("TokenTransferGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenTransferGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenTransfersListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenTransfersListGet_args args = new TokenTransfersListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenTransfersListGet_result result = new TokenTransfersListGet_result();
        try
        {
          result.Success = iface_.TokenTransfersListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TokenTransfersListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenTransfersListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenWalletTransfersGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenWalletTransfersGet_args args = new TokenWalletTransfersGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenWalletTransfersGet_result result = new TokenWalletTransfersGet_result();
        try
        {
          result.Success = iface_.TokenWalletTransfersGet(args.Token, args.Address, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TokenWalletTransfersGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenWalletTransfersGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenTransactionsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenTransactionsGet_args args = new TokenTransactionsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenTransactionsGet_result result = new TokenTransactionsGet_result();
        try
        {
          result.Success = iface_.TokenTransactionsGet(args.Token, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TokenTransactionsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenTransactionsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenInfoGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenInfoGet_args args = new TokenInfoGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenInfoGet_result result = new TokenInfoGet_result();
        try
        {
          result.Success = iface_.TokenInfoGet(args.Token);
          oprot.WriteMessageBegin(new TMessage("TokenInfoGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenInfoGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokenHoldersGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokenHoldersGet_args args = new TokenHoldersGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokenHoldersGet_result result = new TokenHoldersGet_result();
        try
        {
          result.Success = iface_.TokenHoldersGet(args.Token, args.Offset, args.Limit, args.Order, args.Desc);
          oprot.WriteMessageBegin(new TMessage("TokenHoldersGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokenHoldersGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TokensListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TokensListGet_args args = new TokensListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TokensListGet_result result = new TokensListGet_result();
        try
        {
          result.Success = iface_.TokensListGet(args.Offset, args.Limit, args.Order, args.Desc, args.Filters);
          oprot.WriteMessageBegin(new TMessage("TokensListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TokensListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WalletsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WalletsGet_args args = new WalletsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WalletsGet_result result = new WalletsGet_result();
        try
        {
          result.Success = iface_.WalletsGet(args.Offset, args.Limit, args.OrdCol, args.Desc);
          oprot.WriteMessageBegin(new TMessage("WalletsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WalletsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TrustedGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TrustedGet_args args = new TrustedGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TrustedGet_result result = new TrustedGet_result();
        try
        {
          result.Success = iface_.TrustedGet(args.Page);
          oprot.WriteMessageBegin(new TMessage("TrustedGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TrustedGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SyncStateGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SyncStateGet_args args = new SyncStateGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SyncStateGet_result result = new SyncStateGet_result();
        try
        {
          result.Success = iface_.SyncStateGet();
          oprot.WriteMessageBegin(new TMessage("SyncStateGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SyncStateGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExecuteCountGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExecuteCountGet_args args = new ExecuteCountGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExecuteCountGet_result result = new ExecuteCountGet_result();
        try
        {
          result.Success = iface_.ExecuteCountGet(args.ExecuteMethod);
          oprot.WriteMessageBegin(new TMessage("ExecuteCountGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ExecuteCountGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletDataGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public WalletDataGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletDataGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletDataGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletDataGet_result : TBase
    {
      private WalletDataGetResult _success;

      public WalletDataGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WalletDataGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WalletDataGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletDataGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletDataGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletIdGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public WalletIdGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletIdGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletIdGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletIdGet_result : TBase
    {
      private WalletIdGetResult _success;

      public WalletIdGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WalletIdGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WalletIdGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletIdGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletIdGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletTransactionsCountGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public WalletTransactionsCountGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletTransactionsCountGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletTransactionsCountGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletTransactionsCountGet_result : TBase
    {
      private WalletTransactionsCountGetResult _success;

      public WalletTransactionsCountGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WalletTransactionsCountGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WalletTransactionsCountGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletTransactionsCountGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletTransactionsCountGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletBalanceGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public WalletBalanceGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletBalanceGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletBalanceGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletBalanceGet_result : TBase
    {
      private WalletBalanceGetResult _success;

      public WalletBalanceGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WalletBalanceGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WalletBalanceGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletBalanceGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletBalanceGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionGet_args : TBase
    {
      private TransactionId _transactionId;

      public TransactionId TransactionId
      {
        get
        {
          return _transactionId;
        }
        set
        {
          __isset.transactionId = true;
          this._transactionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionId;
      }

      public TransactionGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  TransactionId = new TransactionId();
                  TransactionId.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TransactionId != null && __isset.transactionId) {
            field.Name = "transactionId";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            TransactionId.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionGet_args(");
        bool __first = true;
        if (TransactionId != null && __isset.transactionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TransactionId: ");
          __sb.Append(TransactionId== null ? "<null>" : TransactionId.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionGet_result : TBase
    {
      private TransactionGetResult _success;

      public TransactionGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsGet_args : TBase
    {
      private byte[] _address;
      private long _offset;
      private long _limit;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool offset;
        public bool limit;
      }

      public TransactionsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsGet_result : TBase
    {
      private TransactionsGetResult _success;

      public TransactionsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionFlow_args : TBase
    {
      private Transaction _transaction;

      public Transaction Transaction
      {
        get
        {
          return _transaction;
        }
        set
        {
          __isset.transaction = true;
          this._transaction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transaction;
      }

      public TransactionFlow_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transaction = new Transaction();
                  Transaction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionFlow_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transaction != null && __isset.transaction) {
            field.Name = "transaction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transaction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionFlow_args(");
        bool __first = true;
        if (Transaction != null && __isset.transaction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transaction: ");
          __sb.Append(Transaction== null ? "<null>" : Transaction.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionFlow_result : TBase
    {
      private TransactionFlowResult _success;

      public TransactionFlowResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionFlow_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionFlowResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionFlow_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionFlow_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public TransactionsListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsListGet_result : TBase
    {
      private TransactionsGetResult _success;

      public TransactionsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionsListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLastHash_args : TBase
    {

      public GetLastHash_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLastHash_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLastHash_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLastHash_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLastHash_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLastHash_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLastHash_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGetStable_args : TBase
    {
      private long _sequence;
      private long _limit;

      public long Sequence
      {
        get
        {
          return _sequence;
        }
        set
        {
          __isset.sequence = true;
          this._sequence = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sequence;
        public bool limit;
      }

      public PoolListGetStable_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Sequence = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGetStable_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.sequence) {
            field.Name = "sequence";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Sequence);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGetStable_args(");
        bool __first = true;
        if (__isset.sequence) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sequence: ");
          __sb.Append(Sequence);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGetStable_result : TBase
    {
      private PoolListGetResult _success;

      public PoolListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolListGetStable_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGetStable_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGetStable_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public PoolListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGet_result : TBase
    {
      private PoolListGetResult _success;

      public PoolListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolInfoGet_args : TBase
    {
      private long _sequence;
      private long _index;

      public long Sequence
      {
        get
        {
          return _sequence;
        }
        set
        {
          __isset.sequence = true;
          this._sequence = value;
        }
      }

      public long Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sequence;
        public bool index;
      }

      public PoolInfoGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Sequence = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Index = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolInfoGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.sequence) {
            field.Name = "sequence";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Sequence);
            oprot.WriteFieldEnd();
          }
          if (__isset.index) {
            field.Name = "index";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Index);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolInfoGet_args(");
        bool __first = true;
        if (__isset.sequence) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sequence: ");
          __sb.Append(Sequence);
        }
        if (__isset.index) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Index: ");
          __sb.Append(Index);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolInfoGet_result : TBase
    {
      private PoolInfoGetResult _success;

      public PoolInfoGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolInfoGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolInfoGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolInfoGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolInfoGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolTransactionsGet_args : TBase
    {
      private long _sequence;
      private long _offset;
      private long _limit;

      public long Sequence
      {
        get
        {
          return _sequence;
        }
        set
        {
          __isset.sequence = true;
          this._sequence = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sequence;
        public bool offset;
        public bool limit;
      }

      public PoolTransactionsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Sequence = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolTransactionsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.sequence) {
            field.Name = "sequence";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Sequence);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolTransactionsGet_args(");
        bool __first = true;
        if (__isset.sequence) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sequence: ");
          __sb.Append(Sequence);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolTransactionsGet_result : TBase
    {
      private PoolTransactionsGetResult _success;

      public PoolTransactionsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolTransactionsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolTransactionsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolTransactionsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolTransactionsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StatsGet_args : TBase
    {

      public StatsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("StatsGet_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("StatsGet_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StatsGet_result : TBase
    {
      private StatsGetResult _success;

      public StatsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public StatsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new StatsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("StatsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("StatsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public SmartContractGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractGet_result : TBase
    {
      private SmartContractGetResult _success;

      public SmartContractGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsListGet_args : TBase
    {
      private byte[] _deployer;
      private long _offset;
      private long _limit;

      public byte[] Deployer
      {
        get
        {
          return _deployer;
        }
        set
        {
          __isset.deployer = true;
          this._deployer = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool deployer;
        public bool offset;
        public bool limit;
      }

      public SmartContractsListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Deployer = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Deployer != null && __isset.deployer) {
            field.Name = "deployer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Deployer);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsListGet_args(");
        bool __first = true;
        if (Deployer != null && __isset.deployer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Deployer: ");
          __sb.Append(Deployer);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsListGet_result : TBase
    {
      private SmartContractsListGetResult _success;

      public SmartContractsListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractsListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractsListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractAddressesListGet_args : TBase
    {
      private byte[] _deployer;

      public byte[] Deployer
      {
        get
        {
          return _deployer;
        }
        set
        {
          __isset.deployer = true;
          this._deployer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool deployer;
      }

      public SmartContractAddressesListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Deployer = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractAddressesListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Deployer != null && __isset.deployer) {
            field.Name = "deployer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Deployer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractAddressesListGet_args(");
        bool __first = true;
        if (Deployer != null && __isset.deployer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Deployer: ");
          __sb.Append(Deployer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractAddressesListGet_result : TBase
    {
      private SmartContractAddressesListGetResult _success;

      public SmartContractAddressesListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractAddressesListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractAddressesListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractAddressesListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractAddressesListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForBlock_args : TBase
    {
      private byte[] _obsolete;

      public byte[] Obsolete
      {
        get
        {
          return _obsolete;
        }
        set
        {
          __isset.obsolete = true;
          this._obsolete = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool obsolete;
      }

      public WaitForBlock_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Obsolete = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForBlock_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Obsolete != null && __isset.obsolete) {
            field.Name = "obsolete";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Obsolete);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForBlock_args(");
        bool __first = true;
        if (Obsolete != null && __isset.obsolete) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Obsolete: ");
          __sb.Append(Obsolete);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForBlock_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WaitForBlock_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForBlock_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForBlock_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForSmartTransaction_args : TBase
    {
      private byte[] _smart_public;

      public byte[] Smart_public
      {
        get
        {
          return _smart_public;
        }
        set
        {
          __isset.smart_public = true;
          this._smart_public = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool smart_public;
      }

      public WaitForSmartTransaction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Smart_public = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForSmartTransaction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Smart_public != null && __isset.smart_public) {
            field.Name = "smart_public";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Smart_public);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForSmartTransaction_args(");
        bool __first = true;
        if (Smart_public != null && __isset.smart_public) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Smart_public: ");
          __sb.Append(Smart_public);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForSmartTransaction_result : TBase
    {
      private TransactionId _success;

      public TransactionId Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WaitForSmartTransaction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionId();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForSmartTransaction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForSmartTransaction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsAllListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public SmartContractsAllListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsAllListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsAllListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsAllListGet_result : TBase
    {
      private SmartContractsListGetResult _success;

      public SmartContractsListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractsAllListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractsListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsAllListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsAllListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsStateGet_args : TBase
    {
      private byte[] _address;
      private List<long> _id;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public List<long> Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool id;
      }

      public TransactionsStateGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Id = new List<long>();
                    TList _list123 = iprot.ReadListBegin();
                    for( int _i124 = 0; _i124 < _list123.Count; ++_i124)
                    {
                      long _elem125;
                      _elem125 = iprot.ReadI64();
                      Id.Add(_elem125);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsStateGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I64, Id.Count));
              foreach (long _iter126 in Id)
              {
                oprot.WriteI64(_iter126);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsStateGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsStateGet_result : TBase
    {
      private TransactionsStateGetResult _success;

      public TransactionsStateGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionsStateGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionsStateGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsStateGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsStateGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ContractAllMethodsGet_args : TBase
    {
      private List<NodeApi.ByteCodeObject> _byteCodeObjects;

      public List<NodeApi.ByteCodeObject> ByteCodeObjects
      {
        get
        {
          return _byteCodeObjects;
        }
        set
        {
          __isset.byteCodeObjects = true;
          this._byteCodeObjects = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool byteCodeObjects;
      }

      public ContractAllMethodsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    ByteCodeObjects = new List<NodeApi.ByteCodeObject>();
                    TList _list127 = iprot.ReadListBegin();
                    for( int _i128 = 0; _i128 < _list127.Count; ++_i128)
                    {
                      NodeApi.ByteCodeObject _elem129;
                      _elem129 = new NodeApi.ByteCodeObject();
                      _elem129.Read(iprot);
                      ByteCodeObjects.Add(_elem129);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ContractAllMethodsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ByteCodeObjects != null && __isset.byteCodeObjects) {
            field.Name = "byteCodeObjects";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, ByteCodeObjects.Count));
              foreach (NodeApi.ByteCodeObject _iter130 in ByteCodeObjects)
              {
                _iter130.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ContractAllMethodsGet_args(");
        bool __first = true;
        if (ByteCodeObjects != null && __isset.byteCodeObjects) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ByteCodeObjects: ");
          __sb.Append(ByteCodeObjects);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ContractAllMethodsGet_result : TBase
    {
      private ContractAllMethodsGetResult _success;

      public ContractAllMethodsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ContractAllMethodsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ContractAllMethodsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ContractAllMethodsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ContractAllMethodsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartMethodParamsGet_args : TBase
    {
      private byte[] _address;
      private long _id;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool id;
      }

      public SmartMethodParamsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartMethodParamsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (__isset.id) {
            field.Name = "id";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartMethodParamsGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (__isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartMethodParamsGet_result : TBase
    {
      private SmartMethodParamsGetResult _success;

      public SmartMethodParamsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartMethodParamsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartMethodParamsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartMethodParamsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartMethodParamsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractDataGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public SmartContractDataGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractDataGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractDataGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractDataGet_result : TBase
    {
      private SmartContractDataResult _success;

      public SmartContractDataResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractDataGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractDataResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractDataGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractDataGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractCompile_args : TBase
    {
      private string _sourceCode;

      public string SourceCode
      {
        get
        {
          return _sourceCode;
        }
        set
        {
          __isset.sourceCode = true;
          this._sourceCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sourceCode;
      }

      public SmartContractCompile_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SourceCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractCompile_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SourceCode != null && __isset.sourceCode) {
            field.Name = "sourceCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SourceCode);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractCompile_args(");
        bool __first = true;
        if (SourceCode != null && __isset.sourceCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SourceCode: ");
          __sb.Append(SourceCode);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractCompile_result : TBase
    {
      private SmartContractCompileResult _success;

      public SmartContractCompileResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractCompile_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractCompileResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractCompile_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractCompile_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenBalancesGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public TokenBalancesGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenBalancesGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenBalancesGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenBalancesGet_result : TBase
    {
      private TokenBalancesResult _success;

      public TokenBalancesResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenBalancesGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenBalancesResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenBalancesGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenBalancesGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransfersGet_args : TBase
    {
      private byte[] _token;
      private long _offset;
      private long _limit;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool offset;
        public bool limit;
      }

      public TokenTransfersGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransfersGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransfersGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransfersGet_result : TBase
    {
      private TokenTransfersResult _success;

      public TokenTransfersResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenTransfersGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenTransfersResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransfersGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransfersGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransferGet_args : TBase
    {
      private byte[] _token;
      private TransactionId _id;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public TransactionId Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool id;
      }

      public TokenTransferGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Id = new TransactionId();
                  Id.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransferGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Id.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransferGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id== null ? "<null>" : Id.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransferGet_result : TBase
    {
      private TokenTransfersResult _success;

      public TokenTransfersResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenTransferGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenTransfersResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransferGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransferGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransfersListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public TokenTransfersListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransfersListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransfersListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransfersListGet_result : TBase
    {
      private TokenTransfersResult _success;

      public TokenTransfersResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenTransfersListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenTransfersResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransfersListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransfersListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenWalletTransfersGet_args : TBase
    {
      private byte[] _token;
      private byte[] _address;
      private long _offset;
      private long _limit;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool address;
        public bool offset;
        public bool limit;
      }

      public TokenWalletTransfersGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenWalletTransfersGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenWalletTransfersGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenWalletTransfersGet_result : TBase
    {
      private TokenTransfersResult _success;

      public TokenTransfersResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenWalletTransfersGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenTransfersResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenWalletTransfersGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenWalletTransfersGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransactionsGet_args : TBase
    {
      private byte[] _token;
      private long _offset;
      private long _limit;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool offset;
        public bool limit;
      }

      public TokenTransactionsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransactionsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransactionsGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenTransactionsGet_result : TBase
    {
      private TokenTransactionsResult _success;

      public TokenTransactionsResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenTransactionsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenTransactionsResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenTransactionsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenTransactionsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenInfoGet_args : TBase
    {
      private byte[] _token;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
      }

      public TokenInfoGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenInfoGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenInfoGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenInfoGet_result : TBase
    {
      private TokenInfoResult _success;

      public TokenInfoResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenInfoGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenInfoResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenInfoGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenInfoGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenHoldersGet_args : TBase
    {
      private byte[] _token;
      private long _offset;
      private long _limit;
      private TokenHoldersSortField _order;
      private bool _desc;

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="TokenHoldersSortField"/>
      /// </summary>
      public TokenHoldersSortField Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public bool Desc
      {
        get
        {
          return _desc;
        }
        set
        {
          __isset.desc = true;
          this._desc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool token;
        public bool offset;
        public bool limit;
        public bool order;
        public bool desc;
      }

      public TokenHoldersGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Token = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  Order = (TokenHoldersSortField)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Bool) {
                  Desc = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenHoldersGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Token != null && __isset.token) {
            field.Name = "token";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Token);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          if (__isset.order) {
            field.Name = "order";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Order);
            oprot.WriteFieldEnd();
          }
          if (__isset.desc) {
            field.Name = "desc";
            field.Type = TType.Bool;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Desc);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenHoldersGet_args(");
        bool __first = true;
        if (Token != null && __isset.token) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Token: ");
          __sb.Append(Token);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (__isset.order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Order: ");
          __sb.Append(Order);
        }
        if (__isset.desc) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Desc: ");
          __sb.Append(Desc);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokenHoldersGet_result : TBase
    {
      private TokenHoldersResult _success;

      public TokenHoldersResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokenHoldersGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokenHoldersResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokenHoldersGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokenHoldersGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokensListGet_args : TBase
    {
      private long _offset;
      private long _limit;
      private TokensListSortField _order;
      private bool _desc;
      private TokenFilters _filters;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="TokensListSortField"/>
      /// </summary>
      public TokensListSortField Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }

      public bool Desc
      {
        get
        {
          return _desc;
        }
        set
        {
          __isset.desc = true;
          this._desc = value;
        }
      }

      public TokenFilters Filters
      {
        get
        {
          return _filters;
        }
        set
        {
          __isset.filters = true;
          this._filters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
        public bool order;
        public bool desc;
        public bool filters;
      }

      public TokensListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Order = (TokensListSortField)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  Desc = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  Filters = new TokenFilters();
                  Filters.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokensListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          if (__isset.order) {
            field.Name = "order";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Order);
            oprot.WriteFieldEnd();
          }
          if (__isset.desc) {
            field.Name = "desc";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Desc);
            oprot.WriteFieldEnd();
          }
          if (Filters != null && __isset.filters) {
            field.Name = "filters";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            Filters.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokensListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (__isset.order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Order: ");
          __sb.Append(Order);
        }
        if (__isset.desc) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Desc: ");
          __sb.Append(Desc);
        }
        if (Filters != null && __isset.filters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Filters: ");
          __sb.Append(Filters== null ? "<null>" : Filters.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TokensListGet_result : TBase
    {
      private TokensListResult _success;

      public TokensListResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TokensListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TokensListResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TokensListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TokensListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletsGet_args : TBase
    {
      private long _offset;
      private long _limit;
      private sbyte _ordCol;
      private bool _desc;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }

      public sbyte OrdCol
      {
        get
        {
          return _ordCol;
        }
        set
        {
          __isset.ordCol = true;
          this._ordCol = value;
        }
      }

      public bool Desc
      {
        get
        {
          return _desc;
        }
        set
        {
          __isset.desc = true;
          this._desc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
        public bool ordCol;
        public bool desc;
      }

      public WalletsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Byte) {
                  OrdCol = iprot.ReadByte();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  Desc = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          if (__isset.ordCol) {
            field.Name = "ordCol";
            field.Type = TType.Byte;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteByte(OrdCol);
            oprot.WriteFieldEnd();
          }
          if (__isset.desc) {
            field.Name = "desc";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Desc);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletsGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        if (__isset.ordCol) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrdCol: ");
          __sb.Append(OrdCol);
        }
        if (__isset.desc) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Desc: ");
          __sb.Append(Desc);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WalletsGet_result : TBase
    {
      private WalletsGetResult _success;

      public WalletsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WalletsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new WalletsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WalletsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WalletsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TrustedGet_args : TBase
    {
      private int _page;

      public int Page
      {
        get
        {
          return _page;
        }
        set
        {
          __isset.page = true;
          this._page = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool page;
      }

      public TrustedGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Page = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TrustedGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.page) {
            field.Name = "page";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Page);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TrustedGet_args(");
        bool __first = true;
        if (__isset.page) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Page: ");
          __sb.Append(Page);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TrustedGet_result : TBase
    {
      private TrustedGetResult _success;

      public TrustedGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TrustedGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TrustedGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TrustedGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TrustedGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SyncStateGet_args : TBase
    {

      public SyncStateGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SyncStateGet_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SyncStateGet_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SyncStateGet_result : TBase
    {
      private SyncStateResult _success;

      public SyncStateResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SyncStateGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SyncStateResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SyncStateGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SyncStateGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteCountGet_args : TBase
    {
      private string _executeMethod;

      public string ExecuteMethod
      {
        get
        {
          return _executeMethod;
        }
        set
        {
          __isset.executeMethod = true;
          this._executeMethod = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool executeMethod;
      }

      public ExecuteCountGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExecuteMethod = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteCountGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExecuteMethod != null && __isset.executeMethod) {
            field.Name = "executeMethod";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExecuteMethod);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteCountGet_args(");
        bool __first = true;
        if (ExecuteMethod != null && __isset.executeMethod) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExecuteMethod: ");
          __sb.Append(ExecuteMethod);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteCountGet_result : TBase
    {
      private ExecuteCountGetResult _success;

      public ExecuteCountGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ExecuteCountGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ExecuteCountGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteCountGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteCountGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
