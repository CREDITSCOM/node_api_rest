/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Delegated : TBase
  {
    private NodeApi.Amount _incoming;
    private NodeApi.Amount _outgoing;
    private List<DelegatedItem> _donors;
    private List<DelegatedItem> _recipients;

    public NodeApi.Amount Incoming
    {
      get
      {
        return _incoming;
      }
      set
      {
        __isset.incoming = true;
        this._incoming = value;
      }
    }

    public NodeApi.Amount Outgoing
    {
      get
      {
        return _outgoing;
      }
      set
      {
        __isset.outgoing = true;
        this._outgoing = value;
      }
    }

    public List<DelegatedItem> Donors
    {
      get
      {
        return _donors;
      }
      set
      {
        __isset.donors = true;
        this._donors = value;
      }
    }

    public List<DelegatedItem> Recipients
    {
      get
      {
        return _recipients;
      }
      set
      {
        __isset.recipients = true;
        this._recipients = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool incoming;
      public bool outgoing;
      public bool donors;
      public bool recipients;
    }

    public Delegated() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Incoming = new NodeApi.Amount();
                Incoming.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Outgoing = new NodeApi.Amount();
                Outgoing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Donors = new List<DelegatedItem>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    DelegatedItem _elem26;
                    _elem26 = new DelegatedItem();
                    _elem26.Read(iprot);
                    Donors.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Recipients = new List<DelegatedItem>();
                  TList _list27 = iprot.ReadListBegin();
                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    DelegatedItem _elem29;
                    _elem29 = new DelegatedItem();
                    _elem29.Read(iprot);
                    Recipients.Add(_elem29);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Delegated");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Incoming != null && __isset.incoming) {
          field.Name = "incoming";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Incoming.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Outgoing != null && __isset.outgoing) {
          field.Name = "outgoing";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Outgoing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Donors != null && __isset.donors) {
          field.Name = "donors";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Donors.Count));
            foreach (DelegatedItem _iter30 in Donors)
            {
              _iter30.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Recipients != null && __isset.recipients) {
          field.Name = "recipients";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Recipients.Count));
            foreach (DelegatedItem _iter31 in Recipients)
            {
              _iter31.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Delegated(");
      bool __first = true;
      if (Incoming != null && __isset.incoming) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Incoming: ");
        __sb.Append(Incoming== null ? "<null>" : Incoming.ToString());
      }
      if (Outgoing != null && __isset.outgoing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Outgoing: ");
        __sb.Append(Outgoing== null ? "<null>" : Outgoing.ToString());
      }
      if (Donors != null && __isset.donors) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Donors: ");
        __sb.Append(Donors);
      }
      if (Recipients != null && __isset.recipients) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Recipients: ");
        __sb.Append(Recipients);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
